# Step 1: Input Arguments
input_arguments = get_input_arguments()

# Step 2: Load Data
time_series_data = load_time_series_data(input_arguments['data_file'])
auxiliary_channel_list = load_auxiliary_channel_list(input_arguments['auxiliary_file'])

# Step 3: Remove Noisy Channels
cleaned_auxiliary_channels = []
for aux_channel in auxiliary_channel_list:
    if is_noisy_channel(aux_channel):
        continue
    cleaned_auxiliary_channels.append(aux_channel)

# Step 4: Scale Data
scaled_primary_data = scale_data(time_series_data['primary'])
scaled_auxiliary_data = scale_data(cleaned_auxiliary_channels)

# Step 5: Sort Non-zero Coefficient Channels
sorted_non_zero_channels = []
for aux_channel in cleaned_auxiliary_channels:
    coefficient = calculate_coefficient(aux_channel, scaled_primary_data)
    if coefficient != 0:
        sorted_non_zero_channels.append((aux_channel, coefficient))

sorted_non_zero_channels.sort(key=lambda x: x[1], reverse=True)

# Step 6: Process Non-zero Channels
for aux_channel, coefficient in sorted_non_zero_channels:
    process_channel(aux_channel, scaled_primary_data)

# Step 7: Generate HTML Webpage
html_content = generate_html_report(sorted_non_zero_channels, scaled_primary_data)
save_html_report(html_content, input_arguments['output_file'])

# Step 8: End
print("Analysis completed and HTML report generated.")


